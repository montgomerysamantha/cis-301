/*
3. (4 points)
a. *The Weasleys twins are worried they may lose money,
and want stronger proof that the “nearest” is always in the favor of the business.*

b. Copy your entire working solution from 2.logika into 3.logika.
Uncomment the last assertion at the bottom.
Expand the existing logika proofs to satisfy the new assertion.

c. The final assertion checks that the total error
(the difference in the amount given back as Sickles
versus the value which should be returned in Knuts)
is always 15-or-less; but when it is 15, the change rounds down (in favor of the business).
*/
import org.sireum.logika._

val exact:Z = readInt("Type exact change (in knuts): ")
var rounded: Z = exact

l"""{
    1.  29 ≠ 0                                              algebra
}"""
if (rounded % 29 < 16){
    rounded = rounded - rounded % 29
    l"""{
        // Fix Me
        1. rounded = rounded_old - rounded_old % 29          premise
        2. 29 ≠ 0                                            premise
        3. rounded_old % 29 < 16                             premise
        4. rounded_old = exact                               premise
        5. rounded = exact - exact % 29                      subst1 4 1
        6. rounded_old % 29 <= 15                            algebra 3
        7. exact % 29 <= 15                                  subst1 4 6
        8. exact % 29 = exact - rounded                      algebra 5
        9. exact - rounded <= 15                             subst1 8 7
        10. rounded - exact == 0-exact % 29                  algebra 5
        11. rounded % 29 == 0                                algebra 1
        12. rounded - exact <= 15                            algebra 10
        13. exact % 29 < 16                                  algebra 7
        14. (exact % 29 < 16) or (rounded > exact)           Vi1 13
    }"""
} else {
    rounded = rounded + 29 - rounded % 29
    l"""{
        // Fix Me
        1. rounded = rounded_old + 29 - rounded_old % 29     premise
        2. rounded % 29 == 0                                 algebra 1
        3. rounded_old == exact                              premise
        4. !(rounded_old % 29 < 16)                          premise
        5. rounded_old % 29 >= 16                            algebra 4
        6. rounded == exact + 29 - exact % 29                subst1 3 1
        7. exact % 29 >= 16                                  subst1 3 5
        8. rounded - exact == 29 - exact % 29                algebra 6
        9. rounded - exact <= 13                             algebra 8 7
        10. rounded - exact <= 15                            algebra 9
        11. exact - rounded == -29 + exact % 29              algebra 6
        12. exact - rounded <= 15                            algebra 6 7
        13. rounded > exact                                  algebra 6
        14. (exact % 29 < 16) or (rounded > exact)           Vi2 13
    }"""
}

assert(rounded % 29 == 0)
assert(exact - rounded <= 15)
assert(rounded - exact <= 15)

val sickles: Z = rounded / 29
l"""{
    // Fix Me
    1. sickles == rounded / 29         premise
    2. rounded % 29 == 0               premise
    3. exact - rounded <= 15           premise
    4. rounded - exact <= 15           premise
    5. sickles * 29 == rounded         algebra 1 2
    6. sickles * 29 - exact <= 15      subst2 5 4
    7. exact - sickles * 29 <= 15      subst2 5 3
    8. sickles * 29 <= exact + 15      algebra 6
    9. (exact % 29 < 16) or (rounded > exact)          premise
    10. (exact % 29 < 16) or (sickles * 29 > exact )   subst2 5 9
}"""
assert(sickles * 29 == rounded)
assert(sickles * 29 - exact <= 15)
assert(exact - sickles * 29 <= 15)
assert(exact % 29 < 16 | sickles * 29 > exact)

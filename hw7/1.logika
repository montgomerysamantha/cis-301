import org.sireum.logika._


// postcondition if result != -1 then result is the index holding b
def findKey(a:ZS, b: Z): Z = {
 l"""{
    ensures result != -1 → ∃x: (0 .. < a.size)(a(x) = b ∧ result = x)
 }"""
    var rtrn: Z = -1
    var index: Z = a.size

    while(index >=1){
        l"""{
            invariant
                index >=0
                index <= a.size
                rtrn != -1 → ∃x:(index .. <a.size) (a(x) = b ∧ rtrn = x)
            modifies index, rtrn
        }"""
        index = index - 1
        if (a(index) == b) {
            rtrn = index
        }
    }
    return rtrn
}


// preconditions key is in the the range
// post condition value returned is at keyth index in values
def fetchValue(value:ZS, key: Z): Z = {
l"""{
    requires key >= 0
             key < value.size
    ensures result = value(key)
}"""
    return value(key)
}

//client code  -- this mocks up a key value dictionary
val keys:ZS = ZS( 4,7,5,8,9) // these should be unique, proving they are unique is pain
val values:ZS = ZS(-15,11,65,0,3)
val hash:Z = 7    // this is the key


val kvp:Z = findKey(keys,hash)

//fix if condition
if (kvp != -1){
     var finalValue:Z = fetchValue(values, kvp)
     assert(finalValue == 11)
}

import org.sireum.logika._

def main(): Unit ={
    val a1: ZS = ZS(1, 3, 77, 12, 11,2)
    val b1: Z = 9

    // Change the value of bigenough and the parameters passed to filter
    var bigenough: B = someGreaterThan(a1, b1)
    if(bigenough){
        val filtered : ZS = filter(ZS(1,3,11,5),b1)
        //val filtered : ZS = filter(a1,b1)
        print("the first value greater than 9 is ", filtered(0))
    } else {
        print("there are no values greater than 9 in input array")
    }
}

// Write loop code and invariants to meet the post condition
//  Do not modify the function's pre/post conditions
def someGreaterThan(a: ZS, b:Z ): B = {
    l"""{
        ensures
            result → (∃i: (0 ..< a.size) a(i) > b)
            ¬result → (∀i: (0 ..< a.size) a(i) ≤ b)
    }"""
    var r: B = false
    var j: Z = 0
    while (j < a.size)
    {
    l"""{ invariant j >= 0
                    j <= a.size
                    r = true -> (∃i: (0 ..< a.size) a(i) > b)
                    r = false -> (∀i: (0 ..< j) a(i) ≤ b)
          modifies r, j
    }"""
        if (a(j) > b) {
            r = true
        }
        j = j + 1
    }
    return r
}


// write pre and post conditions to ensure
// 1. every element in inArray is unique
// 2. every element in result is unique
// 3. every element of result is in inArray
// 4. every element of inArray > tValue is in result
// write other conditions (modifies/ requires) as necessary
// DO NO CHANGE ANY CODE in Filter
def filter(inArray:ZS, tValue : Z): ZS = {
l"""{
    requires
            //every element inArray is unique
            ∀x: (0 ..< inArray.size) //for all of the elements in inArray
                ∀y: (0 .. < inArray.size)  x != y -> inArray(x) != inArray(y)
                //there does not exist another element inArray with the same value (unique)
                //and y and x do not match (the indices)

    ensures
            ∀x: (0 ..< inArray.size) //for all of the elements in inArray
                            ∀y: (0 .. < inArray.size)  x != y -> inArray(x) != inArray(y)
            ∀x: (0 ..< result.size) //for all of the elements in result
                ∀y: (0 .. < result.size)  (result(x) != result(y)) -> (y != x)
                //there does not exist another element with the same val (it's unique)

            ∀x: (0 ..< result.size) //for all of the elements in result
                ∃z: (0 .. < inArray.size) (result(x) = inArray(z))
                //there exists an index z in inArray that inArray(z) matches result(x)
                //"every element of result is in inArray"

            ∀x: (0 ..< inArray.size) //for all of the elements inArray
                 inArray(x) > tValue -> (∃b: (0 .. < result.size) result(b) = inArray(x))
                 //if the value at index x is greater than the tValue param, then we know
                 //there exists an index b where result(b) (aka returnArray(b)) = inArray(x)
                 //"every element inArray > tValue is in the result array
}"""
    var index : Z = 0
    var returnArray : ZS = ZS()

    // Provide loop invariant and modifies clause(s)
    while (index < inArray.size){
    l"""{
        invariant   index >= 0
                    index <= inArray.size
                    ∀x: (0 ..< inArray.size) //for all of the elements in inArray
                        ∀y: (0 .. < inArray.size)  x != y -> inArray(x) != inArray(y)
                        //∀y: (0 .. < inArray.size)  (inArray(y) = inArray(x) -> y = x)
                        //there does not exist another element with the same val (it's unique)

                    ∀x: (0 ..< returnArray.size) //for all of the elements in returnArray
                        ∃z: (0 .. < inArray.size) (returnArray(x) = inArray(z) ^ z <= index)
                        //there exists an index z in inArray that matches the value in returnArray(x)
                        // z is also less than or equal to index

                    ∀x:(0 ..< returnArray.size)∀y:(0 .. < returnArray.size)  ((returnArray(x) != returnArray(y))-> (y != x))
                        //for all of the elements in returnArray
                        //there does not exist another element with the same val (it's unique)

                    ∀x: (0 ..< index) //for all of the elements inArray
                         inArray(x) > tValue -> (∃b: (0 .. < returnArray.size) returnArray(b) = inArray(x))
                         //if inArray(x) is greater than tValue AND x is less than our cur index
                         //it implies that there exists an index b in returnArray that holds the
                         //val contained at inArray(x)
                         //"every element inArray > tValue (and less than index) is in the returnArray"

        modifies index, returnArray
    }"""
        if (inArray(index) > tValue){
            returnArray = returnArray :+ inArray(index)
        }
        index = index + 1
    }
    return returnArray
}